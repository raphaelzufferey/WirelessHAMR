
BasicRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800200  00000628  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  008002aa  008002aa  00000766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000972  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001480  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00002c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00014634  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057b  00000000  00000000  000174b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00017a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006031  00000000  00000000  00017ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
  36:	00 00       	nop
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c2       	rjmp	.+1368   	; 0x59e <__vector_17>
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
  8e:	00 00       	nop
  90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
  92:	00 00       	nop
  94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
  96:	00 00       	nop
  98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
  be:	00 00       	nop
  c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	50 c0       	rjmp	.+160    	; 0x16e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	4e c0       	rjmp	.+156    	; 0x16e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4a c0       	rjmp	.+148    	; 0x16e <__bad_interrupt>
  da:	00 00       	nop
  dc:	48 c0       	rjmp	.+144    	; 0x16e <__bad_interrupt>
  de:	00 00       	nop
  e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	44 c0       	rjmp	.+136    	; 0x16e <__bad_interrupt>
  e6:	00 00       	nop
  e8:	42 c0       	rjmp	.+132    	; 0x16e <__bad_interrupt>
  ea:	00 00       	nop
  ec:	b8 c0       	rjmp	.+368    	; 0x25e <__vector_59>
  ee:	00 00       	nop
  f0:	c6 c0       	rjmp	.+396    	; 0x27e <__vector_60>
  f2:	00 00       	nop
  f4:	3c c0       	rjmp	.+120    	; 0x16e <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3a c0       	rjmp	.+116    	; 0x16e <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a6 c0       	rjmp	.+332    	; 0x24a <__vector_63>
  fe:	00 00       	nop
 100:	36 c0       	rjmp	.+108    	; 0x16e <__bad_interrupt>
 102:	00 00       	nop
 104:	34 c0       	rjmp	.+104    	; 0x16e <__bad_interrupt>
 106:	00 00       	nop
 108:	32 c0       	rjmp	.+100    	; 0x16e <__bad_interrupt>
 10a:	00 00       	nop
 10c:	30 c0       	rjmp	.+96     	; 0x16e <__bad_interrupt>
 10e:	00 00       	nop
 110:	2e c0       	rjmp	.+92     	; 0x16e <__bad_interrupt>
 112:	00 00       	nop
 114:	2c c0       	rjmp	.+88     	; 0x16e <__bad_interrupt>
 116:	00 00       	nop
 118:	2a c0       	rjmp	.+84     	; 0x16e <__bad_interrupt>
 11a:	00 00       	nop
 11c:	28 c0       	rjmp	.+80     	; 0x16e <__bad_interrupt>
 11e:	00 00       	nop
 120:	26 c0       	rjmp	.+76     	; 0x16e <__bad_interrupt>
 122:	00 00       	nop
 124:	24 c0       	rjmp	.+72     	; 0x16e <__bad_interrupt>
 126:	00 00       	nop
 128:	22 c0       	rjmp	.+68     	; 0x16e <__bad_interrupt>
 12a:	00 00       	nop
 12c:	20 c0       	rjmp	.+64     	; 0x16e <__bad_interrupt>
 12e:	00 00       	nop
 130:	1e c0       	rjmp	.+60     	; 0x16e <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e4       	ldi	r29, 0x41	; 65
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
 140:	12 e0       	ldi	r17, 0x02	; 2
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b2 e0       	ldi	r27, 0x02	; 2
 146:	e8 e2       	ldi	r30, 0x28	; 40
 148:	f6 e0       	ldi	r31, 0x06	; 6
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	0b bf       	out	0x3b, r16	; 59
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x14>
 150:	07 90       	elpm	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	aa 3a       	cpi	r26, 0xAA	; 170
 156:	b1 07       	cpc	r27, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0x10>

0000015a <__do_clear_bss>:
 15a:	23 e0       	ldi	r18, 0x03	; 3
 15c:	aa ea       	ldi	r26, 0xAA	; 170
 15e:	b2 e0       	ldi	r27, 0x02	; 2
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	ae 32       	cpi	r26, 0x2E	; 46
 166:	b2 07       	cpc	r27, r18
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	e8 d1       	rcall	.+976    	; 0x53c <main>
 16c:	5b c2       	rjmp	.+1206   	; 0x624 <_exit>

0000016e <__bad_interrupt>:
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <rfBegin>:
    // Read from the buffer tail, and update the tail pointer.
    char c = radioRXBuffer.buffer[radioRXBuffer.tail];
    radioRXBuffer.tail = (unsigned int)(radioRXBuffer.tail + 1) % RF_BUFFER_SIZE;
    return c;
  }
}
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	58 d1       	rcall	.+688    	; 0x426 <USART_Send_String>
 176:	ea ea       	ldi	r30, 0xAA	; 170
 178:	f2 e0       	ldi	r31, 0x02	; 2
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	11 92       	st	Z+, r1
 180:	e8 17       	cp	r30, r24
 182:	f9 07       	cpc	r31, r25
 184:	e1 f7       	brne	.-8      	; 0x17e <rfBegin+0xe>
 186:	10 92 2c 03 	sts	0x032C, r1
 18a:	10 92 2b 03 	sts	0x032B, r1
 18e:	10 92 2a 03 	sts	0x032A, r1
 192:	10 92 29 03 	sts	0x0329, r1
 196:	e9 e3       	ldi	r30, 0x39	; 57
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24
 1a0:	8f ec       	ldi	r24, 0xCF	; 207
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <rfBegin+0x34>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <rfBegin+0x3a>
 1aa:	00 00       	nop
 1ac:	10 92 4e 01 	sts	0x014E, r1
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	80 93 42 01 	sts	0x0142, r24
 1b6:	8f ec       	ldi	r24, 0xCF	; 207
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <rfBegin+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <rfBegin+0x50>
 1c0:	00 00       	nop
 1c2:	81 e1       	ldi	r24, 0x11	; 17
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	2f d1       	rcall	.+606    	; 0x426 <USART_Send_String>
 1c8:	80 91 41 01 	lds	r24, 0x0141
 1cc:	8f 71       	andi	r24, 0x1F	; 31
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	d9 f4       	brne	.+54     	; 0x208 <rfBegin+0x98>
 1d2:	e4 e4       	ldi	r30, 0x44	; 68
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
 1dc:	8c e4       	ldi	r24, 0x4C	; 76
 1de:	80 93 4e 01 	sts	0x014E, r24
 1e2:	e8 e4       	ldi	r30, 0x48	; 72
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	80 81       	ld	r24, Z
 1e8:	80 7e       	andi	r24, 0xE0	; 224
 1ea:	8b 60       	ori	r24, 0x0B	; 11
 1ec:	80 83       	st	Z, r24
 1ee:	10 92 45 01 	sts	0x0145, r1
 1f2:	e2 e4       	ldi	r30, 0x42	; 66
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	80 81       	ld	r24, Z
 1f8:	80 7e       	andi	r24, 0xE0	; 224
 1fa:	86 60       	ori	r24, 0x06	; 6
 1fc:	80 83       	st	Z, r24
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	11 d1       	rcall	.+546    	; 0x426 <USART_Send_String>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret

0000020c <rfWrite>:
 20c:	e2 e4       	ldi	r30, 0x42	; 66
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	90 81       	ld	r25, Z
 212:	90 7e       	andi	r25, 0xE0	; 224
 214:	99 60       	ori	r25, 0x09	; 9
 216:	90 83       	st	Z, r25
 218:	e1 e4       	ldi	r30, 0x41	; 65
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	90 81       	ld	r25, Z
 21e:	99 70       	andi	r25, 0x09	; 9
 220:	e9 f3       	breq	.-6      	; 0x21c <rfWrite+0x10>
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	90 93 80 01 	sts	0x0180, r25
 228:	80 93 81 01 	sts	0x0181, r24
 22c:	e9 e3       	ldi	r30, 0x39	; 57
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	80 81       	ld	r24, Z
 232:	82 60       	ori	r24, 0x02	; 2
 234:	80 83       	st	Z, r24
 236:	80 81       	ld	r24, Z
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	80 83       	st	Z, r24
 23c:	e2 e4       	ldi	r30, 0x42	; 66
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	80 81       	ld	r24, Z
 242:	80 7e       	andi	r24, 0xE0	; 224
 244:	86 60       	ori	r24, 0x06	; 6
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <__vector_63>:

// This interrupt is called when radio TX is complete. We'll just
// use it to turn off our TX LED.
ISR(TRX24_TX_END_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
  //led_control(6,0);
}
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_59>:

// This interrupt is called the moment data is received by the radio.
// We'll use it to gather information about RSSI -- signal strength --
// and we'll turn on the RX LED.
ISR(TRX24_RX_START_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
  //led_control(6,0);  // Turn receive LED on
  rssiRaw = PHY_RSSI;  // Read in the received signal strength
 26a:	80 91 46 01 	lds	r24, 0x0146
 26e:	80 93 2d 03 	sts	0x032D, r24
}
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_60>:

// This interrupt is called at the end of data receipt. Here we'll gather
// up the data received. And store it into a global variable. We'll
// also turn off the RX LED.
ISR(TRX24_RX_END_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	cf 57       	subi	r28, 0x7F	; 127
 2ba:	d1 09       	sbc	r29, r1
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	cd bf       	out	0x3d, r28	; 61
  uint8_t length;
  // Maximum transmission is 128 bytes
  uint8_t tempFrame[RF_BUFFER_SIZE];

  // The received signal must be above a certain threshold.
  if (rssiRaw & RX_CRC_VALID)
 2c0:	80 91 2d 03 	lds	r24, 0x032D
 2c4:	87 70       	andi	r24, 0x07	; 7
 2c6:	09 f4       	brne	.+2      	; 0x2ca <__vector_60+0x4c>
 2c8:	82 c0       	rjmp	.+260    	; 0x3ce <__vector_60+0x150>
  {
    // The length of the message will be the first byte received.
    length = TST_RX_LENGTH;
 2ca:	10 91 7b 01 	lds	r17, 0x017B
    // The remaining bytes will be our received data.
    memcpy(&tempFrame[0], (void*)&TRXFBST, length);
 2ce:	c1 2e       	mov	r12, r17
 2d0:	d1 2c       	mov	r13, r1
 2d2:	a6 01       	movw	r20, r12
 2d4:	60 e8       	ldi	r22, 0x80	; 128
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	9a d1       	rcall	.+820    	; 0x612 <memcpy>
    
    // Now we need to collect the frame into our receive buffer.
    //  k will be used to make sure we don't go above the length
    //  i will make sure we don't overflow our buffer.
    unsigned int k = 0;
    unsigned int i = (radioRXBuffer.head + 1) % RF_BUFFER_SIZE; // Read buffer head pos and increment;
 2de:	e0 91 29 03 	lds	r30, 0x0329
 2e2:	f0 91 2a 03 	lds	r31, 0x032A
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	9f 01       	movw	r18, r30
 2ea:	a5 e0       	ldi	r26, 0x05	; 5
 2ec:	b2 e0       	ldi	r27, 0x02	; 2
 2ee:	82 d1       	rcall	.+772    	; 0x5f4 <__umulhisi3>
 2f0:	28 1b       	sub	r18, r24
 2f2:	39 0b       	sbc	r19, r25
 2f4:	36 95       	lsr	r19
 2f6:	27 95       	ror	r18
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	00 24       	eor	r0, r0
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	00 1c       	adc	r0, r0
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	00 1c       	adc	r0, r0
 30a:	89 2f       	mov	r24, r25
 30c:	90 2d       	mov	r25, r0
 30e:	9c 01       	movw	r18, r24
 310:	36 95       	lsr	r19
 312:	32 2f       	mov	r19, r18
 314:	22 27       	eor	r18, r18
 316:	37 95       	ror	r19
 318:	27 95       	ror	r18
 31a:	a9 01       	movw	r20, r18
 31c:	48 1b       	sub	r20, r24
 31e:	59 0b       	sbc	r21, r25
 320:	bf 01       	movw	r22, r30
 322:	64 1b       	sub	r22, r20
 324:	75 0b       	sbc	r23, r21
 326:	cb 01       	movw	r24, r22
    while ((i != radioRXBuffer.tail) && (k < length-2))
 328:	20 91 2b 03 	lds	r18, 0x032B
 32c:	30 91 2c 03 	lds	r19, 0x032C
 330:	62 17       	cp	r22, r18
 332:	73 07       	cpc	r23, r19
 334:	09 f4       	brne	.+2      	; 0x338 <__vector_60+0xba>
 336:	4b c0       	rjmp	.+150    	; 0x3ce <__vector_60+0x150>
 338:	12 30       	cpi	r17, 0x02	; 2
 33a:	09 f4       	brne	.+2      	; 0x33e <__vector_60+0xc0>
 33c:	48 c0       	rjmp	.+144    	; 0x3ce <__vector_60+0x150>
 33e:	8e 01       	movw	r16, r28
 340:	0f 5f       	subi	r16, 0xFF	; 255
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	af ef       	ldi	r26, 0xFF	; 255
 346:	bf ef       	ldi	r27, 0xFF	; 255
 348:	ac 0f       	add	r26, r28
 34a:	bd 1f       	adc	r27, r29
 34c:	ca 0e       	add	r12, r26
 34e:	db 1e       	adc	r13, r27
    {
      // First, we update the buffer with the first byte in the frame
      radioRXBuffer.buffer[radioRXBuffer.head] = tempFrame[k++];
 350:	49 e2       	ldi	r20, 0x29	; 41
 352:	53 e0       	ldi	r21, 0x03	; 3
    // Now we need to collect the frame into our receive buffer.
    //  k will be used to make sure we don't go above the length
    //  i will make sure we don't overflow our buffer.
    unsigned int k = 0;
    unsigned int i = (radioRXBuffer.head + 1) % RF_BUFFER_SIZE; // Read buffer head pos and increment;
    while ((i != radioRXBuffer.tail) && (k < length-2))
 354:	0f 2e       	mov	r0, r31
 356:	fb e2       	ldi	r31, 0x2B	; 43
 358:	ef 2e       	mov	r14, r31
 35a:	f3 e0       	ldi	r31, 0x03	; 3
 35c:	ff 2e       	mov	r15, r31
 35e:	f0 2d       	mov	r31, r0
    {
      // First, we update the buffer with the first byte in the frame
      radioRXBuffer.buffer[radioRXBuffer.head] = tempFrame[k++];
 360:	da 01       	movw	r26, r20
 362:	ed 91       	ld	r30, X+
 364:	fc 91       	ld	r31, X
 366:	d8 01       	movw	r26, r16
 368:	2d 91       	ld	r18, X+
 36a:	8d 01       	movw	r16, r26
 36c:	e6 55       	subi	r30, 0x56	; 86
 36e:	fd 4f       	sbci	r31, 0xFD	; 253
 370:	20 83       	st	Z, r18
      radioRXBuffer.head = i; // Update the head
 372:	fa 01       	movw	r30, r20
 374:	91 83       	std	Z+1, r25	; 0x01
 376:	80 83       	st	Z, r24
      i = (i + 1) % RF_BUFFER_SIZE; // Increment i % BUFFER_SIZE
 378:	fc 01       	movw	r30, r24
 37a:	31 96       	adiw	r30, 0x01	; 1
 37c:	9f 01       	movw	r18, r30
 37e:	a5 e0       	ldi	r26, 0x05	; 5
 380:	b2 e0       	ldi	r27, 0x02	; 2
 382:	38 d1       	rcall	.+624    	; 0x5f4 <__umulhisi3>
 384:	28 1b       	sub	r18, r24
 386:	39 0b       	sbc	r19, r25
 388:	36 95       	lsr	r19
 38a:	27 95       	ror	r18
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	00 24       	eor	r0, r0
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	00 1c       	adc	r0, r0
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	00 1c       	adc	r0, r0
 39e:	89 2f       	mov	r24, r25
 3a0:	90 2d       	mov	r25, r0
 3a2:	9c 01       	movw	r18, r24
 3a4:	36 95       	lsr	r19
 3a6:	32 2f       	mov	r19, r18
 3a8:	22 27       	eor	r18, r18
 3aa:	37 95       	ror	r19
 3ac:	27 95       	ror	r18
 3ae:	b9 01       	movw	r22, r18
 3b0:	68 1b       	sub	r22, r24
 3b2:	79 0b       	sbc	r23, r25
 3b4:	df 01       	movw	r26, r30
 3b6:	a6 1b       	sub	r26, r22
 3b8:	b7 0b       	sbc	r27, r23
 3ba:	cd 01       	movw	r24, r26
    // Now we need to collect the frame into our receive buffer.
    //  k will be used to make sure we don't go above the length
    //  i will make sure we don't overflow our buffer.
    unsigned int k = 0;
    unsigned int i = (radioRXBuffer.head + 1) % RF_BUFFER_SIZE; // Read buffer head pos and increment;
    while ((i != radioRXBuffer.tail) && (k < length-2))
 3bc:	f7 01       	movw	r30, r14
 3be:	20 81       	ld	r18, Z
 3c0:	31 81       	ldd	r19, Z+1	; 0x01
 3c2:	2a 17       	cp	r18, r26
 3c4:	3b 07       	cpc	r19, r27
 3c6:	19 f0       	breq	.+6      	; 0x3ce <__vector_60+0x150>
 3c8:	0c 15       	cp	r16, r12
 3ca:	1d 05       	cpc	r17, r13
 3cc:	49 f6       	brne	.-110    	; 0x360 <__vector_60+0xe2>
      i = (i + 1) % RF_BUFFER_SIZE; // Increment i % BUFFER_SIZE
    }
  }

  //led_control(6,0);  // Turn receive LED off, and we're out
}
 3ce:	c1 58       	subi	r28, 0x81	; 129
 3d0:	df 4f       	sbci	r29, 0xFF	; 255
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	0f 90       	pop	r0
 406:	0b be       	out	0x3b, r0	; 59
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <USART_Send>:
	USART_Send_String("dary!\n");	
} // USART_Init

int USART_Send(char sendByte)
{
	while(!(UCSR0A & (1 << UDRE0)));
 412:	e0 ec       	ldi	r30, 0xC0	; 192
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	90 81       	ld	r25, Z
 418:	95 ff       	sbrs	r25, 5
 41a:	fd cf       	rjmp	.-6      	; 0x416 <USART_Send+0x4>
	UDR0 = sendByte;
 41c:	80 93 c6 00 	sts	0x00C6, r24
	return SUCCESS;
}
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	08 95       	ret

00000426 <USART_Send_String>:

void USART_Send_String(char *command){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	ec 01       	movw	r28, r24

	while(*command != 0x00){
 42c:	88 81       	ld	r24, Y
 42e:	88 23       	and	r24, r24
 430:	29 f0       	breq	.+10     	; 0x43c <USART_Send_String+0x16>
 432:	21 96       	adiw	r28, 0x01	; 1
		USART_Send(*command);
 434:	ee df       	rcall	.-36     	; 0x412 <USART_Send>
	return SUCCESS;
}

void USART_Send_String(char *command){

	while(*command != 0x00){
 436:	89 91       	ld	r24, Y+
 438:	81 11       	cpse	r24, r1
 43a:	fc cf       	rjmp	.-8      	; 0x434 <USART_Send_String+0xe>
		USART_Send(*command);
	command++;}
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <USART_Init>:
#include "HW_Interface.h"
#include <util/delay.h>

void USART_Init(void)
{
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry
 442:	88 e1       	ldi	r24, 0x18	; 24
 444:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	80 93 c2 00 	sts	0x00C2, r24

	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 44e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 452:	83 e3       	ldi	r24, 0x33	; 51
 454:	80 93 c4 00 	sts	0x00C4, r24

		
	USART_Send_String("It's going to be legen...");
 458:	84 e3       	ldi	r24, 0x34	; 52
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	e4 df       	rcall	.-56     	; 0x426 <USART_Send_String>
	USART_Send_String("dary!\n");	
 45e:	8e e4       	ldi	r24, 0x4E	; 78
 460:	92 e0       	ldi	r25, 0x02	; 2
 462:	e1 cf       	rjmp	.-62     	; 0x426 <USART_Send_String>
 464:	08 95       	ret

00000466 <board_init>:
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	
	DDRD |= 1<<LED_R;
 466:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<LED_G;
 468:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<LED_B;
 46a:	54 9a       	sbi	0x0a, 4	; 10
	
	PORTD = (1<<LED_R);
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<LED_B);
 470:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1 << LED_G);
 472:	5b 9a       	sbi	0x0b, 3	; 11
		
	//while(1);	
	// Timer0 configuration
	// CLEAR ON OCRA, PRESCALER TO 64, CTC ON, OCR0A TO 124, OCR0A INT ENABLE
	TCCR1B |= (1 << WGM12); // WaveformGenerationMode13:10 = 0x4
 474:	e1 e8       	ldi	r30, 0x81	; 129
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 47e:	af e6       	ldi	r26, 0x6F	; 111
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	8c 91       	ld	r24, X
 484:	82 60       	ori	r24, 0x02	; 2
 486:	8c 93       	st	X, r24
	OCR1A = 15624;
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	9d e3       	ldi	r25, 0x3D	; 61
 48c:	90 93 89 00 	sts	0x0089, r25
 490:	80 93 88 00 	sts	0x0088, r24
	//TCCR0A = 0b00000010; //timer control register A and B
	TCCR1B |= ((1 << CS10) | (1 << CS11)); // ClockSelect12:10 = 0x03 = 64 Prescaler
 494:	80 81       	ld	r24, Z
 496:	83 60       	ori	r24, 0x03	; 3
 498:	80 83       	st	Z, r24
	sei(); //enable global interrupt
 49a:	78 94       	sei
 49c:	08 95       	ret

0000049e <led_control>:
#include "HW_Interface.h"
#include "Defines.h"

void led_control(int color, int state)
{
	if((color == LED_B) || (color == LED_R) || (color == LED_G))
 49e:	9c 01       	movw	r18, r24
 4a0:	22 50       	subi	r18, 0x02	; 2
 4a2:	31 09       	sbc	r19, r1
 4a4:	23 30       	cpi	r18, 0x03	; 3
 4a6:	31 05       	cpc	r19, r1
 4a8:	80 f5       	brcc	.+96     	; 0x50a <led_control+0x6c>
	{
		switch(state)
 4aa:	61 30       	cpi	r22, 0x01	; 1
 4ac:	71 05       	cpc	r23, r1
 4ae:	31 f0       	breq	.+12     	; 0x4bc <led_control+0x1e>
 4b0:	62 30       	cpi	r22, 0x02	; 2
 4b2:	71 05       	cpc	r23, r1
 4b4:	f1 f0       	breq	.+60     	; 0x4f2 <led_control+0x54>
 4b6:	67 2b       	or	r22, r23
 4b8:	41 f5       	brne	.+80     	; 0x50a <led_control+0x6c>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <led_control+0x3a>
		{
			
			case ON :	PORTD &= ~(1<<color); break;
 4bc:	4b b1       	in	r20, 0x0b	; 11
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <led_control+0x2c>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <led_control+0x28>
 4ce:	cb 01       	movw	r24, r22
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	8b b9       	out	0x0b, r24	; 11
 4d6:	08 95       	ret
			case OFF :	PORTD |= (1<<color); break;
 4d8:	4b b1       	in	r20, 0x0b	; 11
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <led_control+0x48>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <led_control+0x44>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	8b b9       	out	0x0b, r24	; 11
 4f0:	08 95       	ret
			case SWAP :	PORTD ^= (1<<color); break;
 4f2:	4b b1       	in	r20, 0x0b	; 11
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	b9 01       	movw	r22, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <led_control+0x62>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	8a 95       	dec	r24
 502:	e2 f7       	brpl	.-8      	; 0x4fc <led_control+0x5e>
 504:	cb 01       	movw	r24, r22
 506:	84 27       	eor	r24, r20
 508:	8b b9       	out	0x0b, r24	; 11
 50a:	08 95       	ret

0000050c <setup>:
#include "UART.h"

void setup(void);

void setup(void)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	ca e0       	ldi	r28, 0x0A	; 10
 512:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
	for(i=0; i<10; i++)
	{
		led_control(LED_B, SWAP);
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	c0 df       	rcall	.-128    	; 0x49e <led_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51e:	2f ef       	ldi	r18, 0xFF	; 255
 520:	83 ec       	ldi	r24, 0xC3	; 195
 522:	99 e0       	ldi	r25, 0x09	; 9
 524:	21 50       	subi	r18, 0x01	; 1
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <setup+0x18>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <setup+0x22>
 52e:	00 00       	nop
 530:	21 97       	sbiw	r28, 0x01	; 1
void setup(void);

void setup(void)
{
	int i = 0;
	for(i=0; i<10; i++)
 532:	20 97       	sbiw	r28, 0x00	; 0
 534:	79 f7       	brne	.-34     	; 0x514 <setup+0x8>
	{
		led_control(LED_B, SWAP);
		_delay_ms(400);
	}
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <main>:

int main (void)
{
	board_init();
 53c:	94 df       	rcall	.-216    	; 0x466 <board_init>
	setup();
 53e:	e6 df       	rcall	.-52     	; 0x50c <setup>
	USART_Init();
 540:	80 df       	rcall	.-256    	; 0x442 <USART_Init>
	
	if(rfBegin(11) == SUCCESS)
 542:	8b e0       	ldi	r24, 0x0B	; 11
 544:	15 de       	rcall	.-982    	; 0x170 <rfBegin>
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	21 f4       	brne	.+8      	; 0x552 <main+0x16>
		USART_Send_String("RF Started with success\n");
 54a:	85 e5       	ldi	r24, 0x55	; 85
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	6b df       	rcall	.-298    	; 0x426 <USART_Send_String>
 550:	03 c0       	rjmp	.+6      	; 0x558 <main+0x1c>
	else 
		USART_Send_String("Houston, we have a problem. RF NOT WORKING\n");
 552:	8e e6       	ldi	r24, 0x6E	; 110
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	67 df       	rcall	.-306    	; 0x426 <USART_Send_String>
	
	char ReceivedByte;
	USART_Send_String("Echo mode ON :\n");	
 558:	8a e9       	ldi	r24, 0x9A	; 154
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	64 df       	rcall	.-312    	; 0x426 <USART_Send_String>
		//while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been received and is ready to be read from UDR
		ReceivedByte = '\n'; // Fetch the received byte value into the variable "ByteReceived"
		led_control(LED_R, ON);		
		rfWrite(ReceivedByte);
				
		while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 55e:	c0 ec       	ldi	r28, 0xC0	; 192
 560:	d0 e0       	ldi	r29, 0x00	; 0
		UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 562:	06 ec       	ldi	r16, 0xC6	; 198
 564:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		/* Read characters from USART */
		//while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been received and is ready to be read from UDR
		ReceivedByte = '\n'; // Fetch the received byte value into the variable "ByteReceived"
		led_control(LED_R, ON);		
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	97 df       	rcall	.-210    	; 0x49e <led_control>
		rfWrite(ReceivedByte);
 570:	8a e0       	ldi	r24, 0x0A	; 10
 572:	4c de       	rcall	.-872    	; 0x20c <rfWrite>
				
		while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 574:	88 81       	ld	r24, Y
 576:	85 ff       	sbrs	r24, 5
 578:	fd cf       	rjmp	.-6      	; 0x574 <main+0x38>
		UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 57a:	8a e0       	ldi	r24, 0x0A	; 10
 57c:	f8 01       	movw	r30, r16
 57e:	80 83       	st	Z, r24
		led_control(LED_R, OFF);		
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	8a df       	rcall	.-236    	; 0x49e <led_control>
 58a:	ff ef       	ldi	r31, 0xFF	; 255
 58c:	20 e7       	ldi	r18, 0x70	; 112
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	f1 50       	subi	r31, 0x01	; 1
 592:	20 40       	sbci	r18, 0x00	; 0
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <main+0x54>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x5e>
 59a:	00 00       	nop
 59c:	e4 cf       	rjmp	.-56     	; 0x566 <main+0x2a>

0000059e <__vector_17>:




ISR(TIMER1_COMPA_vect) // replace all spaces with underscores, and append "_vect" to the end of the vector's name.
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	0b b6       	in	r0, 0x3b	; 59
 5aa:	0f 92       	push	r0
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	led_control(LED_G, SWAP);
 5c4:	62 e0       	ldi	r22, 0x02	; 2
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	68 df       	rcall	.-304    	; 0x49e <led_control>
}
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0b be       	out	0x3b, r0	; 59
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <__umulhisi3>:
 5f4:	a2 9f       	mul	r26, r18
 5f6:	b0 01       	movw	r22, r0
 5f8:	b3 9f       	mul	r27, r19
 5fa:	c0 01       	movw	r24, r0
 5fc:	a3 9f       	mul	r26, r19
 5fe:	70 0d       	add	r23, r0
 600:	81 1d       	adc	r24, r1
 602:	11 24       	eor	r1, r1
 604:	91 1d       	adc	r25, r1
 606:	b2 9f       	mul	r27, r18
 608:	70 0d       	add	r23, r0
 60a:	81 1d       	adc	r24, r1
 60c:	11 24       	eor	r1, r1
 60e:	91 1d       	adc	r25, r1
 610:	08 95       	ret

00000612 <memcpy>:
 612:	fb 01       	movw	r30, r22
 614:	dc 01       	movw	r26, r24
 616:	02 c0       	rjmp	.+4      	; 0x61c <memcpy+0xa>
 618:	01 90       	ld	r0, Z+
 61a:	0d 92       	st	X+, r0
 61c:	41 50       	subi	r20, 0x01	; 1
 61e:	50 40       	sbci	r21, 0x00	; 0
 620:	d8 f7       	brcc	.-10     	; 0x618 <memcpy+0x6>
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
